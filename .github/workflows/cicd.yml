# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3


      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: export environment variables
        run: |
          export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
          export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
          export ARM_TENANT_ID=${{ secrets.TENANT_ID }}
          export ARM_SUBSCRIPTION_ID=${{ secrets.SUBSCRIPTION_ID }}

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1.3
        with:
          envkey_ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          envkey_ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          envkey_ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          envkey_ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          directory: ./src
          file_name: .env
          fail_on_empty: false
      
      - name: display env file
        run: cat ./src/.env

      #- name: Azure Login
      #  uses: Azure/login@v1.4.6
      #  with:
      #    # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
      #    creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'

      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.9
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: './src'
          tf_actions_comment: true
          args: '--check'
        continue-on-error: true

      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.9
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: './src'
          tf_actions_comment: true
          args: '-backend-config=./backend.tfvars'
        env:
          ARM_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          ARM_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
      
      - name: 'Generate terraform plan vizualizer'
        uses: addnab/docker-run-action@v3
        with:
          image: im2nguyen/rover
          options: -v ${{ github.workspace }}:/src --env-file ./src/.env
          run: ls -la . && /bin/rover -workingDir /src -tfVarsFile /src/terraform.tfvars -tfBackendConfig /src/backend.tfvars -standalone true -genImage true


